// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  passWord  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     Admin?
  Vendor    Vendor?
  Customer  Customer?
  Follow    Follow[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  profilePhoto    String?
  contactNumber   String?
  address         String?
  shopName        String
  shoplogo        String
  shopDiscription String
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User      @relation(fields: [email], references: [email])
  Follow  Follow[]
  Product Product[]

  @@map("vendors")
}

model Customer {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  profilePhoto    String?
  contactNumber   String?
  address         String?
  shopName        String
  shoplogo        String
  shopDiscription String
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("customers")
}

model Follow {
  vendorId  String
  followers Vendor @relation(fields: [vendorId], references: [id])

  userId    String
  following User   @relation(fields: [userId], references: [id])

  @@id([vendorId, userId])
  @@map("followers")
}

model Category {
  id           String    @default(uuid())
  categoryName String    @unique
  Product      Product[]
}

model Product {
  id           String   @default(uuid()) @unique
  title        String
  description  String
  productImage String[]
  price        Float
  quantity     Int
  discount     Float
  categoryName String
  category     Category @relation(fields: [categoryName], references: [categoryName])
  vendorId     String
  vendor       Vendor   @relation(fields: [vendorId], references: [id])
  coupon       Coupon[]

  @@map("products")
}

model Coupon {
  id           String   @default(uuid())
  code         String   @unique
  discountRate Float
  expiryDAte   DateTime
  productId    String
  product      Product  @relation(fields: [productId], references: [id])

  @@map("coupons")
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PyamentStatus {
  UNPAID
  PAID
}

enum UserRole {
  ADMIN
  VENDOR
  COSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENED
  BLOCKED
  DELETED
}
