// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  passWord  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     Admin?
  Vendor    Vendor?
  Customer  Customer?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  contactNumber   String?
  address         String?
  shopName        String
  shoplogo        String
  shopDescription String
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User      @relation(fields: [email], references: [email])
  Follow  Follow[]
  Product Product[]
  Order   Order[]

  @@map("vendors")
}

model Customer {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User     @relation(fields: [email], references: [email])
  Follow Follow[]
  Order  Order[]
  Review Review[]

  @@map("customers")
}

model Follow {
  vendorId  String
  followers Vendor @relation(fields: [vendorId], references: [id])

  customerId String
  following  Customer @relation(fields: [customerId], references: [id])

  @@id([vendorId, customerId])
  @@map("followers")
}

model Category {
  id           String    @id @default(uuid())
  categoryName String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]
}

model Product {
  id           String   @id @unique @default(uuid())
  title        String
  description  String
  productImage String[]
  price        Float
  quantity     Int
  discount     Float?
  categoryId   String
  vendorId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  vendor   Vendor   @relation(fields: [vendorId], references: [id])
  coupon   Coupon[]
  Review   Review[]

  @@map("products")
}

model Coupon {
  id           String   @id @default(uuid())
  code         String   @unique
  discountRate Float
  expiryDAte   DateTime
  productId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id])

  @@map("coupons")
}

model Payment {
  id         String   @id @default(uuid())
  txId       String
  amount     Float
  getwayData Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Order Order[]

  @@map("payments")
}

model Order {
  Id            String        @id @default(uuid())
  userId        String
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  vendorId      String
  vendor        Vendor        @relation(fields: [vendorId], references: [id])
  status        OrderStatus
  totalPrice    Float
  paymentId     String
  payment       Payment       @relation(fields: [paymentId], references: [id])
  paymentStatus PyamentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("orders")
}

model Review {
  id          String   @id @default(uuid())
  description String
  reting      Int
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PyamentStatus {
  UNPAID
  PAID
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENED
  BLOCKED
  DELETED
}
